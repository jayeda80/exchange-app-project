#Terraform - create infrastructure

provider "aws" {
    region = "us-east-1"
}

#VPC
resource "aws_vpc" "main" {
  cidr_block = var.main_vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support = true
  tags = {
    Name = var.name
  }
}

# Internet Gateway
resource "aws_internet_gateway" "ig" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = var.IGW_name
  }
}

# Route table
resource "aws_route_table" "final-project-public-RT" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.ig.id
  }

  tags = {
    Name = var.project-route-table
  }
}

# Route table associations 
resource "aws_route_table_association" "public" {
  subnet_id =  aws_subnet.public_subnet.id
  route_table_id = aws_route_table.final-project-public-RT.id
}

#public subnet 1
resource "aws_subnet" "public_subnet" {
  vpc_id     = aws_vpc.main.id
  cidr_block = var.public_subnet
  availability_zone = var.AZ-2
  #availability_zone = element(var.multi-az-public, count.index)
  map_public_ip_on_launch = true 
  tags = {
    Name = "exchange-app-subnet"
  }
}
#ssh-key for ec2-user
resource "tls_private_key" "keypair" {
  algorithm = "RSA"
  rsa_bits  = 4096
}
resource "aws_key_pair" "keypair" {
  key_name   = "project-ssh-key"
  public_key = tls_private_key.keypair.public_key_openssh

  provisioner "local-exec" {
    command = "echo '${tls_private_key.keypair.private_key_pem}' > ./project-ssh-key.pem"
  }
}

output "ssh_key" {
  description = "ssh key generated by terraform"
  value       = tls_private_key.keypair.private_key_pem
  sensitive  = true
}

#EC2 for web
resource "aws_instance" "exchange-app-web" {
  ami           = var.packer_ami_web
  instance_type = var.instance_type
  key_name = "project-ssh-key"
  vpc_security_group_ids = [aws_security_group.final-project-sg.id]
  subnet_id = aws_subnet.public_subnet.id
  associate_public_ip_address = true

  tags = {
    Name = var.ec2-name-1
  }
  depends_on = [
    aws_security_group.final-project-sg
  ]
}

resource "aws_instance" "exchange-app-api" {
  ami           = var.packer_ami_api
  instance_type = var.instance_type
  key_name = "project-ssh-key"
  vpc_security_group_ids = [aws_security_group.final-project-sg.id]
  subnet_id = aws_subnet.public_subnet.id
  associate_public_ip_address = true

  tags = {
    Name = var.ec2-name-2
  }
  depends_on = [
    aws_security_group.final-project-sg
  ]
}

#security group for project
resource "aws_security_group" "final-project-sg" {
  name        = var.sg_name
  description = "Allow ssh inbound traffic"
  vpc_id      = aws_vpc.main.id

  ingress {
    description      = "TLS from VPC"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

 ingress {
    description      = "TLS from VPC"
    from_port        = 3000
    to_port          = 3000
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  ingress {
    description      = "HTTP from VPC"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  ingress {
    description      = "HTTPS from VPC"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = var.sg_name
  }
}


